/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTransitionArgs } from "./CreateTransitionArgs";
import { UpdateTransitionArgs } from "./UpdateTransitionArgs";
import { DeleteTransitionArgs } from "./DeleteTransitionArgs";
import { TransitionCountArgs } from "./TransitionCountArgs";
import { TransitionFindManyArgs } from "./TransitionFindManyArgs";
import { TransitionFindUniqueArgs } from "./TransitionFindUniqueArgs";
import { Transition } from "./Transition";
import { User } from "../../user/base/User";
import { Wallet } from "../../wallet/base/Wallet";
import { TransitionService } from "../transition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Transition)
export class TransitionResolverBase {
  constructor(
    protected readonly service: TransitionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Transition",
    action: "read",
    possession: "any",
  })
  async _transitionsMeta(
    @graphql.Args() args: TransitionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Transition])
  @nestAccessControl.UseRoles({
    resource: "Transition",
    action: "read",
    possession: "any",
  })
  async transitions(
    @graphql.Args() args: TransitionFindManyArgs
  ): Promise<Transition[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Transition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Transition",
    action: "read",
    possession: "own",
  })
  async transition(
    @graphql.Args() args: TransitionFindUniqueArgs
  ): Promise<Transition | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transition)
  @nestAccessControl.UseRoles({
    resource: "Transition",
    action: "create",
    possession: "any",
  })
  async createTransition(
    @graphql.Args() args: CreateTransitionArgs
  ): Promise<Transition> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        userId: args.data.userId
          ? {
              connect: args.data.userId,
            }
          : undefined,

        walletId: args.data.walletId
          ? {
              connect: args.data.walletId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transition)
  @nestAccessControl.UseRoles({
    resource: "Transition",
    action: "update",
    possession: "any",
  })
  async updateTransition(
    @graphql.Args() args: UpdateTransitionArgs
  ): Promise<Transition | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          userId: args.data.userId
            ? {
                connect: args.data.userId,
              }
            : undefined,

          walletId: args.data.walletId
            ? {
                connect: args.data.walletId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transition)
  @nestAccessControl.UseRoles({
    resource: "Transition",
    action: "delete",
    possession: "any",
  })
  async deleteTransition(
    @graphql.Args() args: DeleteTransitionArgs
  ): Promise<Transition | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "userId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUserId(
    @graphql.Parent() parent: Transition
  ): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "walletId",
  })
  @nestAccessControl.UseRoles({
    resource: "Wallet",
    action: "read",
    possession: "any",
  })
  async resolveFieldWalletId(
    @graphql.Parent() parent: Transition
  ): Promise<Wallet | null> {
    const result = await this.service.getWalletId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
